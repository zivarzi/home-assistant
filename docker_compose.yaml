# based on the incredible Dima Goltsman docker compose file
version: '3.8'
services:


    cloud9:
        restart: always
        hostname: cloud9
        container_name: cloud9
        image: linuxserver/cloud9:latest
        environment:
          PUID: 1000
          PGID: 1000
          TZ: "Asia/Jerusalem"
          # USERNAME: ${C9_USER}   #ALREADY SET IN NGINX
          # PASSWORD: ${C9_PASS}
        volumes:
          - /home/ziv/docker-mounts:/code
          - /home/ziv/platesMigration:/code/platesMigration
          - /var/run/docker.sock:/var/run/docker.sock
        network_mode: "bridge"
        ports:
          - "8000:8000"
          
    homeassistant:
        restart: always
        hostname: homeassistant
        container_name: Home-Assistant
        image: homeassistant/home-assistant:stable
#        depends_on: 
#          - mysql
#          - mqtt
        labels:
          com.ouroboros.enable: "false"
        environment:
          # TZ: "Asia/Jerusalem"
          USER: ${HA_USER}
          PASS: ${HA_PASS}
        volumes:
          - /home/ziv/docker-mounts/ha:/config
          - /media/ziv/RouterHDD/Movies:/media/movies
          - /etc/localtime:/etc/localtime:ro
          - /etc/timezone:/etc/timezone:ro
        network_mode: "host"

    portainer:
        restart: always
        hostname: portainer
        container_name: Portrainer
        image: portainer/portainer-ce
        environment:
          TZ: "Asia/Jerusalem"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /opt/portainer:/data
        network_mode: "bridge"
        ports:
          - "9000:9000"

    ouroboros:
      image: pyouroboros/ouroboros
      container_name: ouroboros
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      environment:
        - TZ=Asia/Jerusalem
        - "NOTIFIERS=${TELEGRAM_NOTIF}"
        - CLEANUP=true
        - LOG_LEVEL=info
        - SELF_UPDATE=true
        - LABEL_ENABLE=true
        - LATEST=true
        - CRON="0 6 * * *"
      restart: always

      
    esphome:
      container_name: esphome
      image: esphome/esphome:latest
      volumes:
        - /home/ziv/docker-mounts/esphome:/config:rw
      network_mode: host
      restart: always
      # ports:
      #   - "6052:6052"
      
     
    mongo:
      container_name: mongo
      image: mongo:4.4.1-bionic
      restart: unless-stopped
#      environment:
#        - MONGO_INITDB_ROOT_USERNAME=ziv
#        - MONGO_INITDB_ROOT_PASSWORD=zivarzi88
#        - MONGO_INITDB_DATABASE=unifi
      volumes:
        - /home/ziv/docker-mounts/mongo/db:/data/db

        #- /home/ziv/docker-mounts/mongo/db/config:/data/configdb
        #- /home/ziv/docker-mounts/mongo/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
        - /home/ziv/docker-mounts/mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      ports:
        - "27017:27017"

    unifi-network-application:
      image: lscr.io/linuxserver/unifi-network-application:latest
      container_name: unifi-network-application
#      depends_on: 
#        - mongo      
      environment:
        - PUID=1000
        - PGID=1000
        - TZ=Asia/Jerusalem
        - MONGO_USER=ziv
        - MONGO_PASS=zivarzi88
        - MONGO_HOST=mongo
        - MONGO_PORT=27017
        - MONGO_DBNAME=unifi
        - MEM_LIMIT=1024 #optional
        - MEM_STARTUP=1024 #optional
        - MONGO_TLS= #optional
        - MONGO_AUTHSOURCE= #optional
      volumes:
        - /home/ziv/docker-mounts/unifi:/config
      ports:
        - 8443:8443
        - 3478:3478/udp
        - 10001:10001/udp
        - 8080:8043
#        - 1900:1900/udp #optional
        - 8843:8843 #optional
        - 8880:8880 #optional
        - 6789:6789 #optional
        - 5514:5514/udp #optional
      restart: unless-stopped          


    mqtt:
      image: eclipse-mosquitto:2.0
      restart: unless-stopped
      volumes:
          - './mosquitto-data:/mosquitto'
      ports:
          - '1883:1883'
          - '9001:9001'
      command: 'mosquitto -c /mosquitto-no-auth.conf'

    zigbee2mqtt:
      container_name: zigbee2mqtt
      image: koenkk/zigbee2mqtt
      restart: unless-stopped
      volumes:
        - ./data:/app/data
        - /run/udev:/run/udev:ro
      ports:
        # Frontend port
        - 8089:8080
      environment:
        - TZ=Asia/Jerusalem
      devices:
        # Make sure this matched your adapter location
        - /dev/ttyACM0
